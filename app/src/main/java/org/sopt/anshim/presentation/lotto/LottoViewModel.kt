package org.sopt.anshim.presentation.lotto

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.gson.JsonParser
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.sopt.anshim.presentation.types.LottoNumViewType
import org.sopt.anshim.util.safeLet
import java.net.URL
import java.text.SimpleDateFormat
import java.util.*
import kotlin.random.Random

class LottoViewModel : ViewModel() {
    private val lottoNums = LottoNumViewType.values()

    private var _generatedLottoNums = MutableLiveData<List<LottoNumViewType>>()
    private var _winningLottoNums = MutableLiveData<List<Int>>()
    private var _resultMsg = MutableLiveData<String>()

    val round = "1010"
    val generatedLottoNums get() = _generatedLottoNums
    val winningLottoNums get() = _winningLottoNums
    val resultMsg get() = _resultMsg

    fun drawLotto() {
        generateLottoNums()
        viewModelScope.launch {
            safeLet(getWinningLottoNums(),
                generatedLottoNums.value?.map { it.ordinal }) { winningNums, generatedNums ->
                setWinningResult(winningNums, generatedNums)
            }
        }
    }

    private fun generateLottoNums() {
        val result = arrayListOf<LottoNumViewType>()
        val source = IntArray(45) { it + 1 }
        val seed =
            SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.KOREA).format(Date()).hashCode()
                .toLong()
        val random = Random(seed)
        source.shuffle(random)
        source.slice(0..5).forEach { num ->
            result.add(lottoNums[num])
        }
        result.sort()

        _generatedLottoNums.value = result
    }

    private suspend fun getWinningLottoNums(): List<Int>? {
        val url = "https://dhlottery.co.kr/common.do?method=getLottoNumber&drwNo=$round"
        val lottoNums = ArrayList<Int>()

        return withContext(Dispatchers.IO) {
            try {
                val response = URL(url).readText()
                val jsonObject = JsonParser.parseString(response).asJsonObject
                val returnValue = jsonObject.get("returnValue").asString

                if (returnValue == "success") {
                    for (i in 1..6) {
                        val lottoNum = jsonObject.get("drwtNo$i").asInt
                        lottoNums.add(lottoNum)
                    }
                    val bonusNumber = jsonObject.get("bnusNo").asInt
                    lottoNums.add(bonusNumber)
                }
                winningLottoNums.postValue(lottoNums)
                lottoNums
            } catch (e: Exception) {
                e.printStackTrace()
                null
            }
        }
    }

    private fun setWinningResult(winningNums: List<Int>, generatedNums: List<Int>) {
        val diff = winningNums.toSet().minus(generatedNums)
        var numOfCommonNums = winningNums.size - diff.size

        val isExistBonusNum = generatedNums.contains(winningNums[6])
        if (isExistBonusNum) numOfCommonNums-- // Î≥¥ÎÑàÏä§ Ïà´ÏûêÎ•º Ï†úÏô∏ÌïòÍ≥† ÎßûÌûå Ïà´Ïûê

        resultMsg.value = when (numOfCommonNums) {
            3 -> "Î≥∏Ï†ÑÏùÄ ÎΩëÏïòÎã§!! 5Ô∏è‚É£Îì± Ï∂ïÌïòÎìúÎ†§Ïöî ü§≠"
            4 -> "Ïò§Îäò Ï†ÄÎÖÅÏùÄ ÏπòÌÇ®? üçó 4Ô∏è‚É£Îì± Ï∂ïÌïòÎìúÎ†§Ïöî!"
            5 -> {
                if (isExistBonusNum) "Ïö∞ÏôÄÏïÑ 2Ô∏è‚É£Îì±!Ô∏è‚úåÔ∏è Ï∂ïÌïòÎìúÎ¶ΩÎãàÎã§!Ô∏è" // ÎãπÏ≤®Î≤àÌò∏ 5Í∞ú Ïà´ÏûêÏùºÏπò + Î≥¥ÎÑàÏä§ Ïà´ÏûêÏùºÏπò
                else "Ï∂ïÌïòÎìúÎ¶ΩÎãàÎã§! 3Ô∏è‚É£Îì±ÏûÖÎãàÎã§ üèÑüèª‚ÄçüèÑüèª‚ÄçÔ∏èüèÑüèª‚ÄçÔ∏è"
            }
            6 -> "ÎãπÏû• Ìá¥ÏÇ¨ Í∞àÍ∏∞ÏÑ∏Ïöî! 1Ô∏è‚É£Îì± Ï∂ïÌïòÎìúÎ†§Ïöî! ü•≥ü•≥üéÇ"
            else -> "Ïïó, ÎÇôÏ≤®Ïù¥ÎÑ§Ïöî ü•≤ Îã§Ïùå Í∏∞ÌöåÎ•º ÎÖ∏Î†§Î≥¥ÏïÑÏöî.."
        }
    }

    companion object {
        private const val TAG = "LottoViewModel"
    }
}